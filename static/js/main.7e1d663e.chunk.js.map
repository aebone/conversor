{"version":3,"sources":["style/Themes.js","style/GlobalStyles.js","components/icons/LightBulb.js","components/Header.js","utils/units.js","utils/length.js","utils/speed.js","utils/area.js","utils/time.js","utils/angle.js","utils/mass.js","utils/volume.js","utils/energy.js","utils/temperature.js","utils/frequency.js","utils/pressure.js","utils/digital.js","components/Content.js","components/App.js","serviceWorker.js","index.js"],"names":["lightTheme","body","text","headerBody","headerText","darkTheme","GlobalStyles","createGlobalStyle","theme","LightBulb","width","role","xmlns","viewBox","fill","d","Header","changeTheme","StyledHeader","Logo","ChangeTheme","tabIndex","aria-pressed","id","onClick","onKeyPress","styled","header","div","props","span","units","label","key","options","value","convert","require","Content","state","length","from","to","speed","area","time","angle","mass","volume","energy","temperature","frequency","pressure","digital","Cards","map","unit","CardDetail","InputRow","htmlFor","type","onChange","event","setState","target","option","index","Result","React","Component","main","article","p","App","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e1d663e.chunk.js","sourcesContent":["export const lightTheme = {\n\tbody: \"#ffffff\",\n\ttext: \"#3e3f3a\",\n\theaderBody: \"#007196\",\n\theaderText: \"#ffffff\"\n};\n\nexport const darkTheme = {\n\tbody: \"#3e3f3a\",\n\ttext: \"#ffffff\",\n\theaderBody: \"#3e3f3a\",\n\theaderText: \"#ffffff\"\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: 'Noto Sans', sans-serif;\n    transition: all 0.50s linear;\n    margin: 0;\n  }\n  \n  header {\n    background: ${({ theme }) => theme.headerBody};\n    color: ${({ theme }) => theme.headerText};\n  }\n\n  h1 { font-size: 1.4rem; }\n  \n  h2 { font-size: 1.2rem; border-bottom: 1px solid #c6c6c6; padding-bottom: 5px; }\n`;\n","import React from \"react\";\n\nconst LightBulb = ({ width }) => {\n\treturn (\n\t\t<svg\n\t\t\trole=\"img\"\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={width || 50}\n\t\t\tviewBox=\"0 0 352 512\"\n\t\t>\n\t\t\t<path\n\t\t\t\tfill=\"currentColor\"\n\t\t\t\td=\"M96.06 454.35c.01 6.29 1.87 12.45 5.36 17.69l17.09 25.69a31.99 31.99 0 0 0 26.64 14.28h61.71a31.99 31.99 0 0 0 26.64-14.28l17.09-25.69a31.989 31.989 0 0 0 5.36-17.69l.04-38.35H96.01l.05 38.35zM0 176c0 44.37 16.45 84.85 43.56 115.78 16.52 18.85 42.36 58.23 52.21 91.45.04.26.07.52.11.78h160.24c.04-.26.07-.51.11-.78 9.85-33.22 35.69-72.6 52.21-91.45C335.55 260.85 352 220.37 352 176 352 78.61 272.91-.3 175.45 0 73.44.31 0 82.97 0 176zm176-80c-44.11 0-80 35.89-80 80 0 8.84-7.16 16-16 16s-16-7.16-16-16c0-61.76 50.24-112 112-112 8.84 0 16 7.16 16 16s-7.16 16-16 16z\"\n\t\t\t></path>\n\t\t</svg>\n\t);\n};\n\nexport default LightBulb;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport LightBulb from \"./icons/LightBulb\";\n\nconst Header = ({ changeTheme, theme }) => {\n\treturn (\n\t\t<StyledHeader theme={theme} role=\"banner\">\n\t\t\t<Logo>+- ×÷</Logo>\n\t\t\t<h1>Conversor de Medidas</h1>\n\t\t\t<ChangeTheme tabIndex={\"0\"} role={\"button\"} aria-pressed={theme===\"dark\"} id={\"change-theme\"} onClick={changeTheme} onKeyPress={changeTheme}>\n\t\t\t\t<LightBulb width={12} />\n\t\t\t</ChangeTheme>\n\t\t</StyledHeader>\n\t);\n};\n\nexport default Header;\n\nconst StyledHeader = styled.header`\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: .5rem 2rem;\n\tbox-shadow: 0 5px 20px -10px #000;\n`;\n\nconst ChangeTheme = styled.div`\n\tcursor: pointer;\n\tmargin-left: auto;\n\tpadding: 0.2rem 0.5rem;\n\tborder: 1px solid;\n\tborder-radius: 5px;\n\t\n\t&:hover {\n\t\tcolor: ${props => props.theme.headerBody};\n\t\tbackground: ${props => props.theme.headerText};\n\t}\n`;\n\nconst Logo = styled.span`\n\tfont-family: \"Source Code Pro\", monospace;\n\tdisplay: inline-flex;\n\talign-items: center;\n\ttext-align: center;\n\twidth: 2rem;\n\theight: 2rem;\n\tpadding: 0.4rem;\n\tborder-radius: 2rem;\n\tmargin-right: 1rem;\n\tline-height: 0.8rem;\n\tcolor: ${props => props.theme.headerBody};\n\tbackground: ${props => props.theme.headerText};\n\tfont-weight: bold;\n`;\n","import { length } from \"./length\";\nimport { speed } from \"./speed\";\nimport { area } from \"./area\";\nimport { time } from \"./time\";\nimport { angle } from \"./angle\";\nimport { mass } from \"./mass\";\nimport { volume } from \"./volume\";\nimport { energy } from \"./energy\";\nimport { temperature } from \"./temperature\";\nimport { frequency } from \"./frequency\";\nimport { pressure } from \"./pressure\";\nimport { digital } from \"./digital\";\n\nexport const units = [\n  length,\n  speed,\n  area,\n  time,\n  angle,\n  mass,\n  volume,\n  energy,\n  temperature,\n  frequency,\n  pressure,\n  digital,\n];\n","export const MILLIMETER = \"mm\";\nexport const CENTIMETER = \"cm\";\nexport const METER = \"m\";\nexport const KILOMETER = \"km\";\nexport const INCH = \"in\";\nexport const YARD = \"yd\";\nexport const FOOT_US = \"ft-us\";\nexport const FOOT = \"ft\";\nexport const MILE = \"mi\";\n\nexport const length = {\n  label: \"Comprimento\",\n  key: \"length\",\n  options: [\n    { label: \"Milímetro (mm)\", value: MILLIMETER },\n    { label: \"Centímetro (cm)\", value: CENTIMETER },\n    { label: \"Metro (m)\", value: METER },\n    { label: \"Quilômetro (km)\", value: KILOMETER },\n    { label: \"Polegada (in)\", value: INCH },\n    { label: \"Jarda (yd)\", value: YARD },\n    { label: \"Pé - US (ft-us)\", value: FOOT_US },\n    { label: \"Pé (ft)\", value: FOOT },\n    { label: \"Milha (mi)\", value: MILE },\n  ],\n};\n","export const METER_PER_SECOND = \"m/s\";\nexport const KILOMETER_PER_HOUR = \"km/h\";\nexport const MILE_PER_HOUR = \"m/h\";\nexport const KNOT = \"knot\";\nexport const FOOT_PER_SECOND = \"ft/s\";\n\nexport const speed = {\n  label: \"Velocidade\",\n  key: \"speed\",\n  options: [\n    { label: \"Metro por Segundo (m/s)\", value: METER_PER_SECOND },\n    { label: \"Quilômetro por Hora (km/h)\", value: KILOMETER_PER_HOUR },\n    { label: \"Milha por Hora (m/h)\", value: MILE_PER_HOUR },\n    { label: \"Nó (knot)\", value: KNOT },\n    { label: \"Pé por Segundo (ft/s)\", value: FOOT_PER_SECOND },\n  ],\n};\n","export const SQUARE_MILLIMETER = \"mm2\";\nexport const SQUARE_CENTIMETER = \"cm2\";\nexport const SQUARE_METER = \"m2\";\nexport const HECTARE = \"ha\";\nexport const SQUARE_KILOMETER = \"km2\";\nexport const SQUARE_INCH = \"in2\";\nexport const SQUARE_YARD = \"yd2\";\nexport const SQUARE_FOOT = \"ft2\";\nexport const ACRE = \"ac\";\nexport const SQUARE_MILE = \"mi2\";\n\nexport const area = {\n  label: \"Área\",\n  key: \"area\",\n  options: [\n    { label: \"Milímetro Quadrado (mm2)\", value: SQUARE_MILLIMETER },\n    { label: \"Centímetro Quadrado (cm2)\", value: SQUARE_CENTIMETER },\n    { label: \"Metro Quadrado (m2)\", value: SQUARE_METER },\n    { label: \"Hectare (ha)\", value: HECTARE },\n    { label: \"Quilômetro Quadrado (km2)\", value: SQUARE_KILOMETER },\n    { label: \"Polegada Quadrada (in2)\", value: SQUARE_INCH },\n    { label: \"Jarda Quadrada (yd2)\", value: SQUARE_YARD },\n    { label: \"Pé Quadrado (ft2)\", value: SQUARE_FOOT },\n    { label: \"Acre (ac)\", value: ACRE },\n    { label: \"Milha Quadrada (mi2)\", value: SQUARE_MILE },\n  ],\n};\n","export const NANOSECOND = \"ns\";\nexport const MICROSECOND = \"mu\";\nexport const MILLISECOND = \"ms\";\nexport const SECOND = \"s\";\nexport const MINUTE = \"min\";\nexport const HOUR = \"h\";\nexport const DAY = \"d\";\nexport const WEEK = \"week\";\nexport const MONTH = \"month\";\nexport const YEAR = \"year\";\n\nexport const time = {\n  label: \"Tempo\",\n  key: \"time\",\n  options: [\n    { label: \"Nanosegundo\", value: NANOSECOND },\n    { label: \"Microsegundo\", value: MICROSECOND },\n    { label: \"Milisegundo\", value: MILLISECOND },\n    { label: \"Segundo\", value: SECOND },\n    { label: \"Minuto\", value: MINUTE },\n    { label: \"Hora\", value: HOUR },\n    { label: \"Dia\", value: DAY },\n    { label: \"Semana\", value: WEEK },\n    { label: \"Mês\", value: MONTH },\n    { label: \"Ano\", value: YEAR },\n  ],\n};\n","export const DEGREE = \"deg\";\nexport const RADIAN = \"rad\";\nexport const GRADIAN = \"grad\";\nexport const ARCMINUTE = \"arcmin\";\nexport const ARCSECOND = \"arcsec\";\n\nexport const angle = {\n  label: \"Ângulo\",\n  key: \"angle\",\n  options: [\n    { label: \"Grau (deg)\", value: DEGREE },\n    { label: \"Radiano (rad)\", value: RADIAN },\n    { label: \"Grado (grad)\", value: GRADIAN },\n    { label: \"Minuto de Arco (arcmin)\", value: ARCMINUTE },\n    { label: \"Segundo de Arco (arcsec)\", value: ARCSECOND },\n  ],\n};\n","export const MICROGRAM = \"mcg\";\nexport const MILLIGRAM = \"mg\";\nexport const GRAM = \"g\";\nexport const KILOGRAM = \"kg\";\nexport const OUNCE = \"oz\";\nexport const POUND = \"lb\";\nexport const METRIC_TONNE = \"mt\";\nexport const TON = \"t\";\n\nexport const mass = {\n  label: \"Massa\",\n  key: \"mass\",\n  options: [\n    { label: \"Micrograma (mcg)\", value: MICROGRAM },\n    { label: \"Miligrama (mg)\", value: MILLIGRAM },\n    { label: \"Grama (g)\", value: GRAM },\n    { label: \"Quilograma (kg)\", value: KILOGRAM },\n    { label: \"Onça (oz)\", value: OUNCE },\n    { label: \"Libra (lb)\", value: POUND },\n    { label: \"Tonelada\", value: METRIC_TONNE },\n    { label: \"Tonelada Curta\", value: TON },\n  ],\n};\n","export const CUBIC_MILLIMETER = \"mm3\";\nexport const CUBIC_CENTIMETER = \"cm3\";\nexport const MILLILITRE = \"ml\";\nexport const CENTILITRE = \"cl\";\nexport const DECILITRE = \"dl\";\nexport const LITRE = \"l\";\nexport const KILOLITRE = \"kl\";\nexport const CUBIC_METER = \"m3\";\nexport const CUBIC_KILOMETER = \"km3\";\nexport const TEASPOON = \"tsp\";\nexport const TABLESPOON = \"Tbs\";\nexport const CUBIC_INCH = \"in3\";\nexport const FLUID_OUNCE = \"fl-oz\";\nexport const CUP = \"cup\";\nexport const PINT = \"pnt\";\nexport const QUART = \"qt\";\nexport const GALLON = \"gal\";\nexport const CUBIC_FOOT = \"ft3\";\nexport const CUBIC_YARD = \"yd3\";\n\nexport const volume = {\n  label: \"Volume\",\n  key: \"volume\",\n  options: [\n    { label: \"Milímetro Cúbico (mm3)\", value: CUBIC_MILLIMETER },\n    { label: \"Centímetro Cúbico (cm3)\", value: CUBIC_CENTIMETER },\n    { label: \"Mililitro (ml)\", value: MILLILITRE },\n    { label: \"Centilitro (cl)\", value: CENTILITRE },\n    { label: \"Decilitro (dl)\", value: DECILITRE },\n    { label: \"Litro (l)\", value: LITRE },\n    { label: \"Quilolitro (kl)\", value: KILOLITRE },\n    { label: \"Metro Cúbico (m3)\", value: CUBIC_METER },\n    { label: \"Quilômetro Cúbico (km3)\", value: CUBIC_KILOMETER },\n    { label: \"Colher de Chá\", value: TEASPOON },\n    { label: \"Colher de Sopa\", value: TABLESPOON },\n    { label: \"Polegada Cúbica (in3)\", value: CUBIC_INCH },\n    { label: \"Onça Fluída (fl-oz)\", value: FLUID_OUNCE },\n    { label: \"Copo\", value: CUP },\n    { label: \"Pinta (Pint)\", value: PINT },\n    { label: \"Quarto (Quart)\", value: QUART },\n    { label: \"Galão\", value: GALLON },\n    { label: \"Pé Cúbico (ft3)\", value: CUBIC_FOOT },\n    { label: \"Jarda Cúbica (yd3)\", value: CUBIC_YARD },\n  ],\n};\n","export const WATT_HOUR = \"Wh\";\nexport const MILLIWATT_HOUR = \"mWh\";\nexport const KILOWATT_HOUR = \"kWh\";\nexport const MEGAWATT_HOUR = \"MWh\";\nexport const GIGAWATT_HOUR = \"GWh\";\nexport const JOULE = \"J\";\nexport const KILOJOULE = \"kJ\";\n\nexport const energy = {\n  label: \"Energia\",\n  key: \"energy\",\n  options: [\n    { label: \"Watt-hora (Wh)\", value: WATT_HOUR },\n    { label: \"Miliwatt-hora (mWh)\", value: MILLIWATT_HOUR },\n    { label: \"Quilowatt-hora (kWh)\", value: KILOWATT_HOUR },\n    { label: \"Megawatt-hora (MWh)\", value: MEGAWATT_HOUR },\n    { label: \"Gigawatt-hora (GWh)\", value: GIGAWATT_HOUR },\n    { label: \"Joule (J)\", value: JOULE },\n    { label: \"Quilojoule (kJ)\", value: KILOJOULE },\n  ],\n};\n","export const CELSIUS = \"C\";\nexport const KELVIN = \"K\";\nexport const FAHRENHEIT = \"F\";\nexport const RANKINE = \"R\";\n\nexport const temperature = {\n  label: \"Temperatura\",\n  key: \"temperature\",\n  options: [\n    { label: \"Celcius\", value: CELSIUS },\n    { label: \"Kelvin\", value: KELVIN },\n    { label: \"Fahrenheit\", value: FAHRENHEIT },\n    { label: \"Rankine\", value: RANKINE },\n  ],\n};\n","export const HERTZ = \"Hz\";\nexport const MILLIHERTZ = \"mHz\";\nexport const KILOHERTZ = \"kHz\";\nexport const MEGAHERTZ = \"MHz\";\nexport const GIGAHERTZ = \"GHz\";\nexport const TERAHERTZ = \"THz\";\nexport const ROTATION_PER_MINUTE = \"rpm\";\nexport const DEGREE_PER_SECOND = \"deg/s\";\nexport const RADIAN_PER_SECOND = \"rad/s\";\n\nexport const frequency = {\n  label: \"Frequência\",\n  key: \"frequency\",\n  options: [\n    { label: \"Hertz (Hz)\", value: HERTZ },\n    { label: \"Milihertz (mHz)\", value: MILLIHERTZ },\n    { label: \"Quilohertz (kHz)\", value: KILOHERTZ },\n    { label: \"Megahertz (MHz)\", value: MEGAHERTZ },\n    { label: \"Gigahertz (GHz)\", value: GIGAHERTZ },\n    { label: \"Terahertz (THz)\", value: TERAHERTZ },\n    { label: \"Rotação por Minuto (rpm)\", value: ROTATION_PER_MINUTE },\n    { label: \"Grau por Segundo\", value: DEGREE_PER_SECOND },\n    { label: \"Radiano por Segundo\", value: RADIAN_PER_SECOND },\n  ],\n};\n","export const PASCAL = \"Pa\";\nexport const HECTOPASCAL = \"hPa\";\nexport const KILOPASCAL = \"kPa\";\nexport const MEGAPASCAL = \"MPa\";\nexport const BAR = \"bar\";\nexport const TORR = \"torr\";\nexport const KILOPOUND_PER_SQUARE_INCH = \"ksi\";\nexport const POUND_PER_SQUARE_INCH = \"psi\";\n\nexport const pressure = {\n  label: \"Pressão\",\n  key: \"pressure\",\n  options: [\n    { label: \"Pascal\", value: PASCAL },\n    { label: \"Hectopascal\", value: HECTOPASCAL },\n    { label: \"Quilopascal\", value: KILOPASCAL },\n    { label: \"Megapascal\", value: MEGAPASCAL },\n    { label: \"Bar\", value: BAR },\n    { label: \"Torr\", value: TORR },\n    {\n      label: \"Quilo-libra por polegada quadrada (ksi)\",\n      value: KILOPOUND_PER_SQUARE_INCH,\n    },\n    {\n      label: \"Libra por polegada quadrada (psi)\",\n      value: POUND_PER_SQUARE_INCH,\n    },\n  ],\n};\n","export const BIT = \"b\";\nexport const KILOBIT = \"Kb\";\nexport const MEGABIT = \"Mb\";\nexport const GIGABIT = \"Gb\";\nexport const TERABIT = \"Tb\";\nexport const BYTE = \"B\";\nexport const KILOBYTE = \"KB\";\nexport const MEGABYTE = \"MB\";\nexport const GIGABYTE = \"GB\";\nexport const TERABYTE = \"TB\";\n\nexport const digital = {\n  label: \"Digital\",\n  key: \"digital\",\n  options: [\n    { label: \"Bit (b)\", value: BIT },\n    { label: \"Kilobit (Kb)\", value: KILOBIT },\n    { label: \"Megabit (Mb)\", value: MEGABIT },\n    { label: \"Gigabit (Gb)\", value: GIGABIT },\n    { label: \"Terabit (Tb)\", value: TERABIT },\n    { label: \"Byte (B)\", value: BYTE },\n    { label: \"Kilobyte (KB)\", value: KILOBYTE },\n    { label: \"Megabyte (MB)\", value: MEGABYTE },\n    { label: \"Gigabyte (GB)\", value: GIGABYTE },\n    { label: \"Terabyte (TB)\", value: TERABYTE },\n  ],\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { units } from \"../utils/units\";\nimport { KILOMETER, MILE } from \"../utils/length\";\nimport { KILOMETER_PER_HOUR, MILE_PER_HOUR } from \"../utils/speed\";\nimport { SQUARE_METER, SQUARE_MILE } from \"../utils/area\";\nimport { DAY, HOUR } from \"../utils/time\";\nimport { GRADIAN, RADIAN } from \"../utils/angle\";\nimport { KILOGRAM, POUND } from \"../utils/mass\";\nimport { LITRE, MILLILITRE } from \"../utils/volume\";\nimport { JOULE, WATT_HOUR } from \"../utils/energy\";\nimport { CELSIUS, FAHRENHEIT } from \"../utils/temperature\";\nimport { HERTZ, MILLIHERTZ } from \"../utils/frequency\";\nimport { BAR, PASCAL } from \"../utils/pressure\";\nimport { GIGABYTE, MEGABYTE } from \"../utils/digital\";\nconst convert = require(\"convert-units\");\n\nclass Content extends React.Component {\n  state = {\n    length: { value: 1, from: MILE, to: KILOMETER },\n    speed: { value: 1, from: MILE_PER_HOUR, to: KILOMETER_PER_HOUR },\n    area: { value: 1, from: SQUARE_METER, to: SQUARE_MILE },\n    time: { value: 1, from: DAY, to: HOUR },\n    angle: { value: 1, from: GRADIAN, to: RADIAN },\n    mass: { value: 1, from: KILOGRAM, to: POUND },\n    volume: { value: 1, from: LITRE, to: MILLILITRE },\n    energy: { value: 1, from: WATT_HOUR, to: JOULE },\n    temperature: { value: 1, from: CELSIUS, to: FAHRENHEIT },\n    frequency: { value: 1, from: HERTZ, to: MILLIHERTZ },\n    pressure: { value: 1, from: PASCAL, to: BAR },\n    digital: { value: 1, from: MEGABYTE, to: GIGABYTE },\n  };\n\n  render() {\n    return (\n      <Cards>\n        {units.map((unit) => {\n          return (\n            <CardDetail key={unit.key}>\n              <h2>{unit.label}</h2>\n              <InputRow>\n                <label htmlFor={unit.key}>Valor</label>\n                <input\n                  id={unit.key}\n                  type={\"number\"}\n                  value={this.state[unit.key].value}\n                  onChange={(event) =>\n                    this.setState({\n                      [unit.key]: {\n                        ...this.state[unit.key],\n                        value: event.target.value,\n                      },\n                    })\n                  }\n                />\n              </InputRow>\n              <InputRow>\n                <label>De</label>\n                <select\n                  value={this.state[unit.key].from}\n                  onChange={(event) =>\n                    this.setState({\n                      [unit.key]: {\n                        ...this.state[unit.key],\n                        from: event.target.value,\n                      },\n                    })\n                  }\n                >\n                  {unit.options.map((option, index) => {\n                    return (\n                      <option key={index} value={option.value}>\n                        {option.label}\n                      </option>\n                    );\n                  })}\n                </select>\n              </InputRow>\n              <InputRow>\n                <label>Para</label>\n                <select\n                  value={this.state[unit.key].to}\n                  onChange={(event) =>\n                    this.setState({\n                      [unit.key]: {\n                        ...this.state[unit.key],\n                        to: event.target.value,\n                      },\n                    })\n                  }\n                >\n                  {unit.options.map((option, index) => {\n                    return (\n                      <option key={index} value={option.value}>\n                        {option.label}\n                      </option>\n                    );\n                  })}\n                </select>\n              </InputRow>\n              <Result>\n                {convert(this.state[unit.key].value)\n                  .from(this.state[unit.key].from)\n                  .to(this.state[unit.key].to)}\n              </Result>\n            </CardDetail>\n          );\n        })}\n      </Cards>\n    );\n  }\n}\nexport default Content;\n\nconst Cards = styled.main`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(22rem, 1fr));\n  grid-gap: 1rem;\n  padding: 1.5rem 1rem;\n\n  @media (max-width: 480px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst CardDetail = styled.article`\n  padding: 1rem;\n  border: 1px #c6c6c6 solid;\n`;\n\nconst InputRow = styled.div`\n  display: flex;\n  margin: 10px 0;\n\n  label {\n    width: 20%;\n    text-align: right;\n    padding: 5px 10px;\n  }\n\n  input,\n  select {\n    flex-grow: 1;\n  }\n`;\n\nconst Result = styled.p`\n  text-align: right;\n  font-weight: bold;\n`;\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from \"../style/Themes\";\nimport { GlobalStyles } from \"../style/GlobalStyles\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\n\nclass App extends React.Component {\n\tstate = { theme: \"light\" };\n\n\tchangeTheme = () => {\n\t\tthis.state.theme === \"light\"\n\t\t\t? this.setState({ theme: \"dark\" })\n\t\t\t: this.setState({ theme: \"light\" });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<ThemeProvider\n\t\t\t\ttheme={this.state.theme === \"light\" ? lightTheme : darkTheme}\n\t\t\t>\n\t\t\t\t<GlobalStyles />\n\t\t\t\t<Header changeTheme={this.changeTheme} theme={this.state.theme} />\n\t\t\t\t<Content />\n\t\t\t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}